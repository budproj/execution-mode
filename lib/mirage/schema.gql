# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
Defines the current available resource policies. You can use it to build read/create/update/delete logic on your application
"""
type Policy {
  create: POLICY!
  read: POLICY!
  update: POLICY!
  delete: POLICY!
}

"""
Defines if the current user has the permission for a given action regarding the resource
"""
enum POLICY {
  ALLOW
  DENY
}

"""Defines all user permissions for each entity in our domain"""
type Permissions {
  user: Policy!
  team: Policy!
  cycle: Policy!
  objective: Policy!
  keyResult: Policy!
  keyResultCheckIn: Policy!
  keyResultComment: Policy!
  keyResultCustomList: Policy!
}

"""A report that records new progress in a given key result"""
type KeyResultCheckIn implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The reported value in this check-in"""
  value: Float!
  valueIncrease: Float!

  """The reported confidence in this check-in"""
  confidence: Int!
  progress: Float!
  progressIncrease: Float!
  confidenceIncrease: Int!

  """The creation date of the report"""
  createdAt: DateTime!

  """The key result ID that this report is related to"""
  keyResultId: ID!
  keyResult: KeyResult!

  """The user ID that owns this report"""
  userId: ID!
  user: User!

  """The comment added in the report"""
  comment: String
  parent: KeyResultCheckIn
}

interface EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!
}

"""
A resource in our domain. This define the entity you are currently working with
"""
enum RESOURCE {
  PERMISSION
  USER
  TEAM
  CYCLE
  OBJECTIVE
  KEY_RESULT
  KEY_RESULT_CHECK_IN
  KEY_RESULT_COMMENT
  KEY_RESULT_CUSTOM_LIST
}

"""
A constraint is a given scope inside our domain. It defines which type of resources are you trying to interact with
"""
enum CONSTRAINT {
  ANY
  COMPANY
  TEAM
  OWNS
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The delete result from a delete mutation for key result check-ins"""
type KeyResultCheckInDeleteResult implements DeleteResultObject {
  """The amount of entities removed"""
  affected: Int!
}

interface DeleteResultObject {
  """The amount of entities removed"""
  affected: Int!
}

"""
The current status of this team. By status we mean progress, confidence, and other reported values from it's objectives and their child team's objectives
"""
type TeamStatus implements Status {
  """
  The computed percentage current progress of this entity. The entity progress calculation vary based on the entity
  """
  progress: Float!

  """
  The computed current confidence of this entity. The confidence is always the lowest among the entity's children
  """
  confidence: Int!

  """
  The most recent objective status update inside among all objectives for this team and it's child teams
  """
  latestObjectiveStatus: ObjectiveStatus
}

"""
The current status of an entity. By status we mean progress, confidence, and other reported values from it's children
"""
interface Status {
  """
  The computed percentage current progress of this entity. The entity progress calculation vary based on the entity
  """
  progress: Float!

  """
  The computed current confidence of this entity. The confidence is always the lowest among the entity's children
  """
  confidence: Int!
}

"""
A collection of users. It can be either inside another team, or a root team (a.k.a. company)
"""
type Team implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The name of the team"""
  name: String!
  isCompany: Boolean!
  progressIncreaseSinceLastWeek: Float!

  """The creation date of the team"""
  createdAt: DateTime!

  """The last update date of the team"""
  updatedAt: DateTime!

  """The user ID that owns this team"""
  ownerId: ID!
  owner: User!

  """The description about the team"""
  description: String

  """The gender of the team"""
  gender: String

  """
  The team that is the company of this team. This is also known as "rootTeam"
  """
  company: Team

  """The ID of the team that owns this team"""
  parentId: ID
  parent: Team
  users: [User!]
  teams: [Team!]
  teamsRanking: [Team!]
  cycles: [Cycle!]
  objectives: [Objective!]
  keyResults: [KeyResult!]
  latestKeyResultCheckIn: KeyResultCheckIn
  status: TeamStatus!
}

"""
The current status of this cycle. By status we mean progress, confidence, and other reported values from it's objectives
"""
type CycleStatus implements Status {
  """
  The computed percentage current progress of this entity. The entity progress calculation vary based on the entity
  """
  progress: Float!

  """
  The computed current confidence of this entity. The confidence is always the lowest among the entity's children
  """
  confidence: Int!

  """
  The most recent objective status update inside among all objectives for this cycle
  """
  latestObjectiveStatus: ObjectiveStatus
}

"""
The period of time that can contain multiple objectives. It is used to organize a team strategy
"""
type Cycle implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The period of the cycle"""
  period: String!

  """
  The candence of this cycle. Cadence is the frequency at which previous objectives have to be grade and new ones created.
  """
  cadence: CADENCE!

  """This flag defines if objectives related to this cycle can be updated"""
  active: Boolean!

  """The date that this cycle starts"""
  dateStart: DateTime!

  """The date that this cycle ends"""
  dateEnd: DateTime!
  status: CycleStatus!

  """The creation date of this cycle"""
  createdAt: DateTime!

  """The last update date of this cycle"""
  updatedAt: DateTime!

  """The team ID that this cycle belongs to"""
  teamId: ID!
  team: Team!
  objectives: [Objective!]
  keyResults(
    """The user ID that should owns the key results you are trying to fetch"""
    ownerId: ID
  ): [KeyResult!]

  """
  Each cycle can relates with a given higher cycle, creating a for of tree-like architecture. If this cycle has any cycle above it, the ID of that will be recorded here
  """
  parentId: ID
  parent: Cycle
  cycles(
    """If this flag is true, it will only fetch active cycles"""
    active: Boolean

    """This key filters all queries to a given cadence"""
    cadence: CADENCE
  ): [Cycle!]
}

"""
Each cadence represents a period of time in which your cycles can be created
"""
enum CADENCE {
  YEARLY
  QUARTERLY
}

"""
The current status of this objective. By status we mean progress, confidence, and other reported values from it's key results
"""
type ObjectiveStatus implements Status {
  """
  The computed percentage current progress of this entity. The entity progress calculation vary based on the entity
  """
  progress: Float!

  """
  The computed current confidence of this entity. The confidence is always the lowest among the entity's children
  """
  confidence: Int!

  """The latest reported check-in among all key results of that objective"""
  latestKeyResultCheckIn: KeyResultCheckIn
}

"""A group of key results that has the same focus"""
type Objective implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The title(name) of the objective"""
  title: String!
  progressIncreaseSinceLastWeek: Float!

  """The creation date of the objective"""
  createdAt: DateTime!

  """The last update date of the objective"""
  updatedAt: DateTime!

  """The cycle ID that owns this objective"""
  cycleId: ID!
  cycle: Cycle!

  """The user ID that owns this objective"""
  ownerId: ID!
  owner: User!
  keyResults: [KeyResult!]
  status: ObjectiveStatus!
}

"""
User is an entity inside a given root team (a.k.a. company). It is associated with many teams, progress reports, and others.
"""
type User implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The name of the user"""
  firstName: String!
  fullName: String!

  """The sub field in Auth0 (their ID)"""
  authzSub: String!

  """The creation date of the user"""
  createdAt: DateTime!

  """The last update date of this user"""
  updatedAt: DateTime!

  """The last name of the user"""
  lastName: String

  """The gender of the user"""
  gender: String

  """The user role in the company"""
  role: String

  """The picture of the user"""
  picture: String

  """The custom nickname that user wants to be called"""
  nickname: String

  """
  A description for that user. A more detailed information where the user tells about her/himself
  """
  about: String

  """The URL for the user's LinkedIn profile"""
  linkedInProfileAddress: String
  companies(limit: Int): [Team!]
  teams: [Team!]
  ownedTeams: [Team!]
  objectives: [Objective!]
  keyResults: [KeyResult!]
  keyResultCheckIns: [KeyResultCheckIn!]
}

"""A comment in a given key result"""
type KeyResultComment implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The text of the comment"""
  text: String!

  """The creation date of the comment"""
  createdAt: DateTime!

  """The last update date of the comment"""
  updatedAt: DateTime!

  """The key result ID that this comment is related to"""
  keyResultId: ID!
  keyResult: KeyResult!

  """The user ID that owns this comment"""
  userId: ID!
  user: User!
}

"""The delete result from a delete mutation for key result comments"""
type KeyResultCommentDeleteResult implements DeleteResultObject {
  """The amount of entities removed"""
  affected: Int!
}

"""A goal that is created for the team focusing in a given team objective"""
type KeyResult implements EntityObject {
  """The ID of this entity"""
  id: ID!
  policies(resource: RESOURCE, constraint: CONSTRAINT): Policy!

  """The title(name) of the key result"""
  title: String!

  """The initial value of the key result"""
  initialValue: Float!

  """The goal of the key result"""
  goal: Float!

  """The format of the key result"""
  format: String!
  isOutdated: Boolean!
  timeline(offset: Int, limit: Int = 10): [TimelineEntryUnion!]!

  """The creation date of the key result"""
  createdAt: DateTime!

  """The last update date of the key result"""
  updatedAt: DateTime!

  """The owner ID of the key result"""
  ownerId: ID!
  owner: User!

  """The object ID that this key result belongs to"""
  objectiveId: ID!
  objective: Objective!

  """The team ID that this key result belongs to"""
  teamId: ID!
  team: Team!

  """The description explaining the key result"""
  description: String
  keyResultCheckIns(limit: Int, order: SORTING = DESC): [KeyResultCheckIn!]
  keyResultComments: [KeyResultComment!]!
  latestKeyResultCheckIn: KeyResultCheckIn
}

union TimelineEntryUnion = KeyResultCheckIn | KeyResultComment

"""Defines the order to return your results in a given query"""
enum SORTING {
  DESC
  ASC
}

type Query {
  permissions(constraint: CONSTRAINT = COMPANY): Permissions!
  user(id: ID!): User!
  me: User!
  team(id: ID!): Team!
  teams(
    """The ID of the parent team that you want to user on this query"""
    parentId: ID

    """
    A flag that toggles this query to fetch only companies. A company is a team that does not have a parent
    """
    onlyCompanies: Boolean

    """
    A flag that toggles this query to fetch only companies and departments. A company is a team that does not have a parent, while a department is a team that has teams inside of it
    """
    onlyCompaniesAndDepartments: Boolean
  ): [Team!]
  cycle(id: ID!): Cycle!
  cycles(
    """If this flag is true, it will only fetch active cycles"""
    active: Boolean

    """This key filters all queries to a given cadence"""
    cadence: CADENCE
  ): [Cycle!]
  cyclesInSamePeriod(
    """If this flag is true, it will only fetch active cycles"""
    active: Boolean

    """This key filters all queries to a given cadence"""
    cadence: CADENCE

    """Defines a list of cycle IDs we are going to fetch from"""
    fromCycles: [ID!]!
  ): [Cycle!]
  cyclesParents(
    """If this flag is true, it will only fetch active cycles"""
    active: Boolean

    """This key filters all queries to a given cadence"""
    cadence: CADENCE

    """Defines a list of cycle IDs we are going to fetch from"""
    fromCycles: [ID!]!
  ): [Cycle!]
  objective(id: ID!): Objective!
  keyResult(id: ID!): KeyResult!
  keyResultCheckIn(id: ID!): KeyResultCheckIn!
  keyResultComment(id: ID!): KeyResultComment!
}

type Mutation {
  updateUser(userData: UserDataInput!, userID: ID!): User!
  createKeyResultCheckIn(keyResultCheckIn: KeyResultCheckInInput!): KeyResultCheckIn!
  deleteKeyResultCheckIn(id: ID!): KeyResultCheckInDeleteResult!
  createKeyResultComment(keyResultComment: KeyResultCommentInput!): KeyResultComment!
  deleteKeyResultComment(id: ID!): KeyResultCommentDeleteResult!
}

"""Data that you can assign to a given user"""
input UserDataInput {
  """The first name of the user"""
  firstName: String

  """The last name of the user"""
  lastName: String

  """
  The gender of the user. The gender is used to define how we would call that given user
  """
  gender: USER_GENDER

  """The role of the user in her/his company"""
  role: String

  """The custom nickname that user wants to be called"""
  nickname: String

  """
  A description for that user. A more detailed information where the user tells about her/himself
  """
  about: String

  """The URL for the user's LinkedIn profile"""
  linkedInProfileAddress: String
}

"""Each gender represents a possible gender option for our users"""
enum USER_GENDER {
  MALE
  FEMALE
}

"""The required data to create a new progress report"""
input KeyResultCheckInInput {
  """The progress value you are reporting"""
  value: Float!

  """The confidence value you are reporting"""
  confidence: Int!

  """The key result ID related to this report"""
  keyResultId: ID!

  """The comment in your report"""
  comment: String
}

"""The required data to create a new comment"""
input KeyResultCommentInput {
  """The text of the comment"""
  text: String!

  """The key result ID related to this comment"""
  keyResultId: ID!
}